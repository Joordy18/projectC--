#include <iostream>
#include <vector>

using namespace std;

char board[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
char currentPlayer = 'X';

void printBoard() {
    cout << "-------------" << endl;
    for (int i = 0; i < 3; i++) {
        cout << "| ";
        for (int j = 0; j < 3; j++) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

bool checkWin() {
    // Check rows
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) {
            return true;
        }
    }

    // Check columns
    for (int j = 0; j < 3; j++) {
        if (board[0][j] == currentPlayer && board[1][j] == currentPlayer && board[2][j] == currentPlayer) {
            return true;
        }
    }

    // Check diagonals
    if ((board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) ||
        (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer)) {
        return true;
    }

    return false;
}

bool checkDraw() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                return false; // There's an empty space, so it's not a draw
            }
        }
    }
    return true; // All spaces are filled, it's a draw
}

void makeMove() {
    int row, col;
    cout << "Player " << currentPlayer << ", enter row (1-3): ";
    cin >> row;
    cout << "Player " << currentPlayer << ", enter column (1-3): ";
    cin >> col;

    row--; // Adjust for 0-based indexing
    col--;

    if (row < 0 || row > 2 || col < 0 || col > 2) {
        cout << "Invalid move. Please enter valid coordinates." << endl;
        makeMove();
        return;
    }

    if (board[row][col] != ' ') {
        cout << "That space is already occupied. Please try again." << endl;
        makeMove();
        return;
    }

    board[row][col] = currentPlayer;
}

int main() {
    cout << "Welcome to Tic-Tac-Toe!" << endl;

    while (true) {
        printBoard();

        makeMove();

        if (checkWin()) {
            printBoard();
            cout << "Player " << currentPlayer << " wins!" << endl;
            break;
        }

        if (checkDraw()) {
            printBoard();
            cout << "It's a draw!" << endl;
            break;
        }

        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}